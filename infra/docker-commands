/* comandos docker */
#docker examples
https://hub.docker.com/_/fedora/
https://github.com/dockerfile/mysql/blob/master/Dockerfile
https://github.com/heddle317/docker-flask-example/blob/master/Dockerfile

#docker =>
sudo dnf install docker-engine --allowerasing
https://docs.docker.com/engine/installation/linux/fedora/

#rodar docker sem sudo:
sudo usermod -aG docker $USER


#comando para subir
sudo dnf install docker-engine docker-devel docker-compose
sudo groupadd docker
sudo gpasswd -a ${USER} docker
sudo systemctl enable docker.service
sudo service docker restart
sudo systemctl start docker
sudo docker-compose up &

#comando para remover tudo, images/container
#https://www.hostinger.com/tutorials/docker-remove-all-images-tutorial/
sudo docker image prune
sudo docker image prune –a
sudo docker image prune -a --filter "until=24h" #especifica imagem

sudo docker container prune
sudo docker container prune --filter "until=24h"

docker volume prune --filter "label!=keep"
docker network prune
docker network prune --filter "until=24h" 

#remove todas as imagens
docker system prune

#remove tudo de tudo de docker
sudo docker volume prune
sudo docker image prune
sudo docker network prune
sudo docker container prune

#entrar dentro do conteiner
docker-compose exec <servico> bash
docker-compose exec vetor-zkm bash
docker exec -it <conteiner_id> i<command>
docker-compose exec proxy bash
docker-compose exec proxy sh



#comando para deletar/remover um conteiner
sudo docker rm <nome-do-conteiner>

#comando para fazer o build das dependencias do projeto
docker-compose build
-remover container que não usa:
docker rm `docker ps --no-trunc -aq`

-remover imagens:
docker images -q |xargs docker rmi

-Para todos os containers
docker stop $(docker ps -a -q)

-Remover todos os containers
docker rm $(docker ps -a -q) 

docker images
docker build -t ubuntu .

#remove imagem
docker rmi Image Image

#remove conteiner 
docker rm <nome-do-conteiner>

#lista todas imagens
docker images -a
docker images -q

#subir as instancias
docker-compose up

#entrar num docker
docker images
docker run -it <nome-da-magem> /bin/bash

#######################################
#comandos para criar network no docker#
#######################################
#comando para criar nova network
sudo docker network create api2-checklist
#comando para listar os conteiners
sudo docker ps
#agora vamos conectar as nossa nova network com
#os conteiners que temos
sudo docker network connect api2-checklist 56e3
sudo docker network connect api2-checklist 22e2
#agora com este comando podemos ver como ficou a network que criamos
sudo docker inspect api2-checklist
#com o comando abaixo podemos entrar no conteiner e testar a integracao;
sudo docker exec -it 22e2 sh



#Dockerfile examples
https://github.com/docker-library/python/blob/3f12f511910098f45951111aa5642fd935133afc/3.7-rc/stretch/Dockerfile
https://github.com/tianon/docker-brew-ubuntu-core/blob/5fce3945d95630c2fc03c21ef8665d92bd824642/artful/Dockerfile

#principais comandos
https://woliveiras.com.br/posts/comandos-mais-utilizados-no-docker/

#comandos-kubernetes
gcloud config get-value project
gcloud container clusters get-credentials fs-kubernetes-homol --zone us-east1
docker build ./ -t 'us.gcr.io/fs-gc-homol/python-flask:1'
docker push us.gcr.io/fs-gc-homol/python-flask:1
kubectl apply -f kubernetes/homol-config.yaml
kubectl apply -f kubernetes/homol-deployment.yaml
kubectl apply -f kubernetes/homol-service.yaml
kubectl port-forward homol-python-flask-5d64dfc45c-wk7th 8888:5000 -n homol

